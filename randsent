#! /usr/bin/env python

import sys
import random
import argparse.py

def parseGrammar(grammarFile):
  '''
  takes a file of the format
  1  verb  have
  1  verb  throw
  1  noun  man
  and returns a dictionary of the form
  { 'verb': ['have', 'throw'], 'noun': ['man']}
  '''
  grammar = {}
  
  rule = None
  while rule != '':
    rule = grammarFile.readline()
    # rule = rule.lower()
    parts = rule.split()  
    
    if len(parts) < 3:
      continue
    if parts[0] == '#':
      continue
    for i in xrange(len(parts)):
      if parts[i] == '#':
        parts = parts[:i]
        break

    if parts[1].lower() in grammar:
      grammar[parts[1].lower()].append((float(parts[0]), parts[2:]))
    else:
      grammar[parts[1].lower()] = [(float(parts[0]), parts[2:])]
    
  # for key in grammar:
  #   grammar[key].sort()
  return grammar

def getWeightedBranching(grammar, token):
  # print [choice[0] for choice in grammar[token]]
  totalWeight = sum([choice[0] for choice in grammar[token.lower()]])
  index = random.random() * totalWeight
  # print "token: " + token
  # print grammar[token.lower()]
  # print "total weight: ", totalWeight
  # print "index: ", index
  currentLocation = 0
  for option in grammar[token.lower()]:
    # print "option: ", option
    if currentLocation <= index < currentLocation + option[0]:
      # print "currentLocation: ", currentLocation
      return option
    currentLocation += option[0]
  raise ValueError

prettyString = ""
def expand(grammar, token, tree=False):
  global prettyString
  if token.lower() in grammar.keys():
    tokens = getWeightedBranching(grammar, token)[1]
    prettyString += '(' + str(token)
    results = []
    for t in tokens:
      results.extend(expand(grammar, t, tree))
    prettyString += ')'
    return results
  else:
    prettyString += ' ' + str(token)
    return [token]
    

def buildSentence(grammar, number=1, tree=False):
  result = []
  global prettyString
  # print expand(grammar, 'start')
  for i in xrange(number):
    prettyString = ""
    wordlist = [tup for tup in expand(grammar, 'START', tree)]
    if tree:
      result.append(prettyString)
    else:
      result.append(' '.join(wordlist))
  return '\n'.join(result)
    
  
parser = argparse.ArgumentParser(description="Generate random sentences.")
parser.add_argument("grammar", help="the grammar to use")
parser.add_argument("number", help="how many sentences to generate", nargs='?', default=1, type=int)
parser.add_argument("-t", "--tree", help="show the tree structure", action="store_true")
args = parser.parse_args()

grammarFile = open(args.grammar, 'r')
grammar = parseGrammar(grammarFile)

sys.stdout.write(buildSentence(grammar, args.number, args.tree))
sys.stdout.write('\n')



